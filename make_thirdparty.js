#!/usr/bin/env node

var os = require('os');
var path = require('path');
var fs = require('fs');

var data = fs.readFileSync('third_party.json', {encoding:'utf8'});

var libs = JSON.parse(data);

var out = process.stdout;

// Add a convenience function (newline must be \r\n)
out.writeln = function() {
	if (arguments.length == 0) {
		this.write("\r\n");
	} else {
		for (var i = 0; i < arguments.length; i++) {
			this.write(arguments[i].toString());
			this.write("\r\n");
		}
	}
};

out.writeEchoBlock = function() {
	for (var i = 0; i < arguments.length; i++) {
		var str = arguments[i].toString();
		if (str.length == 0) {
			this.write("ECHO.");
		} else {
			this.write("ECHO ");
			this.write(str);
		}
		this.write("\r\n");
	}
};

// First, dump out the basic header

out.writeln('@ECHO OFF',
'',
'REM This is an autogenerated BAT file intended to pull in third party libraries.',
'REM Make changes to the third_party.json file and then run:',
'REM     node make_thirdparty.js > third_party.bat',
'REM To update this file.',
'');

// Next, go through and see what tools we require

var checkSVN = false;
var checkGit = false;

// Filter out all non-objects (used to allow "comments")
libs = libs.filter(function(lib) {
	if (typeof lib == 'object') {
		// Also filter out anything that's skipped
		return !('skip' in lib && lib['skip']);
	} else {
		return false;
	}
});

libs.forEach(function(lib) {
	if (lib['type'] == 'svn')
		checkSVN = true;
	if (lib['type'] == 'git')
		checkGit = true;
});

if (checkSVN) {
	out.writeln('svn --version >NUL 2>NUL',
		'IF ERRORLEVEL 1 GOTO noSVN',
		'');
}

if (checkGit) {
	out.writeln('git --version >NUL 2>NUL',
		'IF ERRORLEVEL 1 GOTO noGit',
		'');
}

function makeLabel(name) {
	name = name.replace(/[^A-Za-z0-9]+/g, '_');
	return name.charAt(0).toUpperCase() + name.substring(1);
}

function writeCheckout(name, label, dest, checkoutCommand, updateCommand) {
	// Some things can't be updated (are tied to a specific version).
	// The checkout script varies slightly based on that. The very first thing
	// jumps to "have" or "done" depending on whether we update.
	out.writeln('IF EXIST ' + dest + ' GOTO ' + (updateCommand ? 'have' : 'done') + label,
		'',
		'ECHO.',
		'ECHO Attempting to checkout ' + name + '...',
		'ECHO.',
		'',
		checkoutCommand,
		'',
		'IF ERRORLEVEL 1 GOTO checkoutFailed' + label,
		'',
		'ECHO.',
		'ECHO ' + name + ' checkout complete.',
		'ECHO.',
		'',
		'GOTO done' + label,
		'',
		':checkoutFailed' + label,
		'',
		'ECHO.',
		'ECHO Unable to checkout ' + name + '.',
		'',
		'GOTO exitFailure',
		'');
	if (updateCommand) {
		out.writeln(':have' + label,
		'',
		'ECHO.',
		'ECHO Updating ' + name + '...',
		'ECHO.',
		'',
		updateCommand,
		'',
		'IF ERRORLEVEL 1 GOTO updateFailed' + label,
		'',
		'GOTO done' + label,
		'',
		':updateFailed' + label,
		'',
		'ECHO.',
		'ECHO Unable to update ' + name + '.',
		'GOTO exitFailure',
		'');
	}
	out.writeln(':done' + label, '');
}

// Now dump out the code for pulling in each library

libs.forEach(function(lib) {
	// Pull out values/create defaults:
	var type = lib['type'];
	var name = lib['name'];
	var label = 'id' in lib ? lib['id'] : makeLabel(name);
	var dest = lib['dest'];
	var url = lib['url'];
	// Switch based on type
	switch (type) {
	case 'svn':
		var update = false;
		if ('revision' in lib) {
			url += '@' + lib['revision'];
			update = 'svn update -r ' + lib['revision'] + ' ' + dest;
		} else {
			update = 'svn update ' + dest;
		}
		writeCheckout(name, label, dest, 'svn checkout ' + url + ' ' + dest, update);
		break;
	case 'git':
		writeCheckout(name, label, dest, 'git clone ' + url + ' ' + dest);
		break;
	default:
		out.writeln('ECHO Oops, got a library of type "' + lib['type'] + '" that isn\'t being handled!');
	}
});

// Footer stuff (basically, error handling blocks)

out.writeln('python --version >NUL 2>NUL',
	'',
	'IF ERRORLEVEL 1 GOTO noPython',
	'');
out.writeEchoBlock('Python was detected (via running "python --version"). Note that the build',
	'system requires Python 2.6+, but NOT the 3.0 branch. (So 2.7 is fine, but 3.0',
	"will NOT work). This script doesn't attempt to detect the version.");
out.writeln('',
	'GOTO done',
	'',
	':noPython',
	'');
out.writeEchoBlock('Python was not detected and is required. You can either install it via Cygwin,',
	'grab the Chromium provided version, or install the official Windows version.',
	'Note that the build system requires Python 2.6+, but NOT the 3.0 branch. (So',
	'2.7 is fine, but 3.0 will NOT work).',
	'',
	'If you want to grab the Chromium provided version, from the checked out V8',
	'directory, run the following command (all on one line):',
	'',
	'   svn co http://src.chromium.org/svn/trunk/tools/third_party/python_26@89111 third_party/python_26',
	'');
out.writeln('',
	':done',
	'');
out.writeEchoBlock('',
	'To build V8, you first need to run GYP:',
	'',
	'    CD v8',
	'    python build\\gyp_v8',
	'',
	'And then the actual Visual Studio build:',
	'',
	'    devenv /build Debug build\\All.sln',
	'        OR',
	'    MSBuild build\\all.sln /p:Configuration=Debug',
	'');
out.writeln('', 'GOTO exitSuccess', '');

if (checkSVN) {
	out.writeln(':noSVN', '');
	out.writeEchoBlock('Subversion was not located. An SVN client is required to download the third',
		'party libraries. An SVN client can be obtained through Cygwin',
		"(http://www.cygwin.com/) or from Apache Subversion's website",
		'(http://subversion.apache.org/).');
	out.writeln('', 'GOTO exitFailure', '');
}

if (checkGit) {
	out.writeln(':noGit', '');
	out.writeEchoBlock('Git was not located. A git client is required to download the third',
		'party libraries. A git client for Windows can be obtained through Cygwin',
		'(http://www.cygwin.com/).');
	out.writeln('', 'GOTO exitFailure', '');
}

out.writeln(':exitFailure',
	'EXIT /B 1',
	':exitSuccess',
	'');
